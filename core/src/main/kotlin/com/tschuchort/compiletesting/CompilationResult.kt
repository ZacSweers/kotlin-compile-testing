package com.tschuchort.compiletesting

import java.io.File
import java.net.URLClassLoader
import org.jetbrains.kotlin.compiler.plugin.ExperimentalCompilerApi

/** Result of the compilation. */
@ExperimentalCompilerApi
sealed class CompilationResult(
  /** The exit code of the compilation. */
  val exitCode: KotlinCompilation.ExitCode,
  /** Messages that were printed by the compilation. */
  val messages: String,
  /** The directory where only the final files will be. */
  val outputDirectory: File
)

@ExperimentalCompilerApi
class JsCompilationResult(
  exitCode: KotlinCompilation.ExitCode,
  messages: String,
  compilation: KotlinJsCompilation,
) : CompilationResult(exitCode, messages, compilation.outputDir) {
  /** JS files output by the compilation. */
  val jsFiles: List<File> = outputDirectory.listFilesRecursively()
}

/** Result of the compilation */
@ExperimentalCompilerApi
class JvmCompilationResult(
  exitCode: KotlinCompilation.ExitCode,
  messages: String,
  compilation: KotlinCompilation,
) : CompilationResult(exitCode, messages, compilation.classesDir) {
  /** ClassLoader to load the compiled classes */
  val classLoader =
    URLClassLoader(
      // Include the original classpaths and the output directory to be able to load classes from
      // dependencies.
      compilation.classpaths.plus(outputDirectory).map { it.toURI().toURL() }.toTypedArray(),
      this::class.java.classLoader
    )

  /** Compiled classes and resources output by the compilation. */
  val compiledClassAndResourceFiles: List<File> = outputDirectory.listFilesRecursively()

  /**
   * Intermediate source and resource files generated by the annotation processor that will be
   * compiled in the next steps.
   */
  val sourcesGeneratedByAnnotationProcessor: List<File> =
    compilation.kaptSourceDir.listFilesRecursively() +
      compilation.kaptKotlinGeneratedDir.listFilesRecursively()

  /** Stub files generated by kapt */
  val generatedStubFiles: List<File> = compilation.kaptStubsDir.listFilesRecursively()

  /**
   * The class, resource and intermediate source files generated during the compilation. Does not
   * include stub files and kapt incremental data.
   */
  val generatedFiles: Collection<File> =
    sourcesGeneratedByAnnotationProcessor + compiledClassAndResourceFiles + generatedStubFiles
}
